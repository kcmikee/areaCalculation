/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface AreaCalculationInterface extends Interface {
  getFunction(
    nameOrSignature: "GetArea" | "Rectangle" | "Square" | "Triangle"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "GetArea", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "Rectangle",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "Square",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "Triangle",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "GetArea", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Rectangle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Square", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Triangle", data: BytesLike): Result;
}

export interface AreaCalculation extends BaseContract {
  connect(runner?: ContractRunner | null): AreaCalculation;
  waitForDeployment(): Promise<this>;

  interface: AreaCalculationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  GetArea: TypedContractMethod<[], [bigint], "view">;

  Rectangle: TypedContractMethod<
    [_length: BigNumberish, _width: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  Square: TypedContractMethod<[_side: BigNumberish], [bigint], "nonpayable">;

  Triangle: TypedContractMethod<
    [_base: BigNumberish, _height: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "GetArea"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "Rectangle"
  ): TypedContractMethod<
    [_length: BigNumberish, _width: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "Square"
  ): TypedContractMethod<[_side: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "Triangle"
  ): TypedContractMethod<
    [_base: BigNumberish, _height: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  filters: {};
}
