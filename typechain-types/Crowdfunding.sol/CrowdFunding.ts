/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface CrowdFundingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "campaignCount"
      | "campaigns"
      | "createCampaign"
      | "donateToCampaign"
      | "endCampaign"
      | "owner"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CampaignCreated"
      | "CampaignEnded"
      | "DonationReceived"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "campaignCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaigns",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCampaign",
    values: [string, string, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "donateToCampaign",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endCampaign",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "campaignCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "campaigns", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "donateToCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
}

export namespace CampaignCreatedEvent {
  export type InputTuple = [
    _title: string,
    _description: string,
    _benefactor: AddressLike,
    _goal: BigNumberish,
    _deadline: BigNumberish,
    _amountRaised: BigNumberish,
    _owner: AddressLike
  ];
  export type OutputTuple = [
    _title: string,
    _description: string,
    _benefactor: string,
    _goal: bigint,
    _deadline: bigint,
    _amountRaised: bigint,
    _owner: string
  ];
  export interface OutputObject {
    _title: string;
    _description: string;
    _benefactor: string;
    _goal: bigint;
    _deadline: bigint;
    _amountRaised: bigint;
    _owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CampaignEndedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DonationReceivedEvent {
  export type InputTuple = [
    _campaignId: BigNumberish,
    _amount: BigNumberish,
    _date: BigNumberish
  ];
  export type OutputTuple = [
    _campaignId: bigint,
    _amount: bigint,
    _date: bigint
  ];
  export interface OutputObject {
    _campaignId: bigint;
    _amount: bigint;
    _date: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CrowdFunding extends BaseContract {
  connect(runner?: ContractRunner | null): CrowdFunding;
  waitForDeployment(): Promise<this>;

  interface: CrowdFundingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  campaignCount: TypedContractMethod<[], [bigint], "view">;

  campaigns: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string, bigint, bigint, bigint] & {
        title: string;
        description: string;
        benefactor: string;
        owner: string;
        goal: bigint;
        deadline: bigint;
        amountRaised: bigint;
      }
    ],
    "view"
  >;

  createCampaign: TypedContractMethod<
    [
      _title: string,
      _description: string,
      _benefactor: AddressLike,
      _goal: BigNumberish,
      _duration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  donateToCampaign: TypedContractMethod<
    [_campaignId: BigNumberish],
    [void],
    "payable"
  >;

  endCampaign: TypedContractMethod<
    [_campaignId: BigNumberish],
    [void],
    "payable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "campaignCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "campaigns"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string, bigint, bigint, bigint] & {
        title: string;
        description: string;
        benefactor: string;
        owner: string;
        goal: bigint;
        deadline: bigint;
        amountRaised: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createCampaign"
  ): TypedContractMethod<
    [
      _title: string,
      _description: string,
      _benefactor: AddressLike,
      _goal: BigNumberish,
      _duration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "donateToCampaign"
  ): TypedContractMethod<[_campaignId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "endCampaign"
  ): TypedContractMethod<[_campaignId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "CampaignCreated"
  ): TypedContractEvent<
    CampaignCreatedEvent.InputTuple,
    CampaignCreatedEvent.OutputTuple,
    CampaignCreatedEvent.OutputObject
  >;
  getEvent(
    key: "CampaignEnded"
  ): TypedContractEvent<
    CampaignEndedEvent.InputTuple,
    CampaignEndedEvent.OutputTuple,
    CampaignEndedEvent.OutputObject
  >;
  getEvent(
    key: "DonationReceived"
  ): TypedContractEvent<
    DonationReceivedEvent.InputTuple,
    DonationReceivedEvent.OutputTuple,
    DonationReceivedEvent.OutputObject
  >;

  filters: {
    "CampaignCreated(string,string,address,uint256,uint256,uint256,address)": TypedContractEvent<
      CampaignCreatedEvent.InputTuple,
      CampaignCreatedEvent.OutputTuple,
      CampaignCreatedEvent.OutputObject
    >;
    CampaignCreated: TypedContractEvent<
      CampaignCreatedEvent.InputTuple,
      CampaignCreatedEvent.OutputTuple,
      CampaignCreatedEvent.OutputObject
    >;

    "CampaignEnded()": TypedContractEvent<
      CampaignEndedEvent.InputTuple,
      CampaignEndedEvent.OutputTuple,
      CampaignEndedEvent.OutputObject
    >;
    CampaignEnded: TypedContractEvent<
      CampaignEndedEvent.InputTuple,
      CampaignEndedEvent.OutputTuple,
      CampaignEndedEvent.OutputObject
    >;

    "DonationReceived(uint256,uint256,uint256)": TypedContractEvent<
      DonationReceivedEvent.InputTuple,
      DonationReceivedEvent.OutputTuple,
      DonationReceivedEvent.OutputObject
    >;
    DonationReceived: TypedContractEvent<
      DonationReceivedEvent.InputTuple,
      DonationReceivedEvent.OutputTuple,
      DonationReceivedEvent.OutputObject
    >;
  };
}
